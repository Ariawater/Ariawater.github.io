<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基础算法</title>
      <link href="2021/01/27/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>2021/01/27/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="位运算">位运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &amp; y<span class="comment">//与 都为1时才为1</span></span><br><span class="line">x | y<span class="comment">//或 只要有1就是1</span></span><br><span class="line">x ^ y <span class="comment">//异或 不同时才为1 x^y^y = x</span></span><br><span class="line">x &lt;&lt; i<span class="comment">//左移 x * 2^i</span></span><br><span class="line">x &gt;&gt; i<span class="comment">//右移 x / (2^i)</span></span><br></pre></td></tr></table></figure><p>快速幂：<span class="math inline">\(a^b\%p \,\, (1e9)\)</span></p><p>以<span class="math inline">\(3^7\)</span>为例，<span class="math inline">\(7=(111)_2 = 1+2+4\)</span> ，<span class="math inline">\(3^7 = 3 ^ 1 * 3 ^ 2 * 3 ^ 4\)</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">binpow</span><span class="params">(ll a, ll b, llp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>%p;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) res = res * a % p;<span class="comment">//若b的最后一位是1就乘a</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>洛谷<span class="math inline">\(P2114\)</span>：</p><p>位运算只有关该位上的数，不影响其它位上的数，所以我们从高位到低位依次判断攻击力的该位是填<span class="math inline">\(0\)</span>还是填<span class="math inline">\(1\)</span>，进而可以确定答案的每一位。</p><p>确定攻击的每一位填1还是填0</p><ul><li>填1需满足：<ul><li>该位为1后的总和&lt;=M</li><li>经过运算后答案的该位上还是1</li></ul></li><li>其余情况填1后经过运算也会变成0，否则就&gt;M</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBit</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">// 获取a的第b位，最低位编号为0</span></span><br><span class="line">    <span class="keyword">return</span> a &gt;&gt; b &amp; <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setBit</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">// 将a的第b位设置为1，最低位编号为0</span></span><br><span class="line"><span class="keyword">return</span> a | <span class="number">1</span> &lt;&lt; b; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">string</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> t[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> i)</span>     <span class="comment">// 计算攻击力该位为1或0,经过所有数第i位操作后的结果</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[j] == <span class="string">&quot;AND&quot;</span>) x &amp;= t[j] &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">&quot;OR&quot;</span>) x |= t[j] &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> x ^= t[j] &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; s[i] &gt;&gt; t[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">29</span>; ~i; --i) &#123;     <span class="comment">// 1e9 &lt; 2^30</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt;&gt; i) &#123;   <span class="comment">//m右移i位仍不为0说明该位填1后小于m</span></span><br><span class="line">            <span class="keyword">int</span> x = solve(<span class="number">0</span>, i), y = solve(<span class="number">1</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= y) res |= x &lt;&lt; i;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res |= y &lt;&lt; i;</span><br><span class="line">                m -= <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> res |= solve(<span class="number">0</span>, i) &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归">递归</h3><p><span class="math inline">\(AcWing95\)</span>：我们枚举第一行的所有点击方法，共32种，完成第一行的点击后，固定第一行，从第一行开始递推，对于灭的灯，我们按下一行对应位置。对第一行的32次枚举涵盖了该问题的整个状态空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> light[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//按下(x, y)位置的灯</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = x+dx[i], b = y+dy[i];</span><br><span class="line">        <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt; <span class="number">5</span> &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            light[a][b] ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; <span class="number">5</span>; ++k) &#123;  <span class="comment">//枚举第一行所有按的情况00000-&gt;11111</span></span><br><span class="line">        <span class="keyword">char</span> backup[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(backup, light, <span class="keyword">sizeof</span> light);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &gt;&gt; j &amp; <span class="number">1</span>) &#123;<span class="comment">//k的第j位按了一下</span></span><br><span class="line">                step++;</span><br><span class="line">                turn(<span class="number">0</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;<span class="comment">//通过第一行，推导234行</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (light[i][j] == <span class="string">&#x27;0&#x27;</span>) &#123;<span class="comment">//若灯是灭的,就按下一行对应位置</span></span><br><span class="line">                    step++;</span><br><span class="line">                    turn(i+<span class="number">1</span>, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> is_solve = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (light[<span class="number">4</span>][j] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                is_solve = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_solve) ans = min(ans, step);</span><br><span class="line">        <span class="built_in">memcpy</span>(light, backup, <span class="keyword">sizeof</span> backup);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; <span class="number">6</span>) ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) <span class="built_in">cin</span> &gt;&gt; light[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分治">分治</h3><p><span class="math inline">\(POJ3889\)</span>：题目中的<span class="math inline">\(N\)</span>级城市，可以由<span class="math inline">\(4\)</span>个<span class="math inline">\(N−1\)</span>级城市构造，因此我们每次可以不断地分形<span class="math inline">\(N−1\)</span>级，将问题范围不断地缩小即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;ll, ll&gt; pll;</span><br><span class="line"></span><br><span class="line"><span class="function">pll <span class="title">calc</span><span class="params">(ll n, ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//以图的中心为原点建立坐标系</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    ll len = <span class="number">1ll</span> &lt;&lt; (n - <span class="number">1</span>), cnt = <span class="number">1ll</span> &lt;&lt; (<span class="number">2</span> * n - <span class="number">2</span>) ; <span class="comment">//cnt每个子问题中城市的数量</span></span><br><span class="line">    pll pos = calc(n<span class="number">-1</span>, m % cnt);  <span class="comment">//继续分治</span></span><br><span class="line">    ll x = pos.first, y = pos.second;</span><br><span class="line">    ll z = m / cnt;</span><br><span class="line">    <span class="keyword">if</span> (z == <span class="number">0</span>) <span class="keyword">return</span> &#123;-y-len, len-x&#125;;  <span class="comment">// 左上角</span></span><br><span class="line">    <span class="keyword">if</span> (z == <span class="number">1</span>) <span class="keyword">return</span> &#123;x+len, y + len&#125;;    <span class="comment">//右上角</span></span><br><span class="line">    <span class="keyword">if</span> (z == <span class="number">2</span>) <span class="keyword">return</span> &#123;x + len, y - len&#125;;  <span class="comment">// 右下角</span></span><br><span class="line">    <span class="keyword">return</span> &#123;y - len, x - len&#125;;  <span class="comment">// 左下角</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        ll N, A, B;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; A &gt;&gt; B;</span><br><span class="line">        pll a = calc(N, A<span class="number">-1</span>);</span><br><span class="line">        pll b = calc(N, B<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">double</span> x = a.first - b.first, y = a.second - b.second;</span><br><span class="line">        <span class="keyword">double</span> dis = <span class="built_in">sqrt</span>(x * x + y * y) * <span class="number">5</span> + <span class="number">0.5</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>) dis &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序">排序</h3><p><span class="math inline">\(AcWing105\)</span>：题目原型是环形均分纸牌</p><p>设标号为<span class="math inline">\(i\)</span>的人初始有<span class="math inline">\(a_i\)</span>张纸牌，最终局面下每个人手中纸牌数量相同为<span class="math inline">\(avg\)</span>。</p><p>令<span class="math inline">\(A_i=a_i-avg\)</span> <span class="math inline">\(S_i\)</span>为<span class="math inline">\(A_i\)</span>的前缀和， 那么<span class="math inline">\(S_n=0\)</span></p><p>最终要求答案为<span class="math inline">\(ans=\sum abs(S_i)\)</span></p><p>假设我们从第k个人后将环切开，那么这<span class="math inline">\(n\)</span>个人手中纸牌数，前缀和分别为</p><p><span class="math inline">\(A[k+1] \quad \quad S[k+1]-S[k]\)</span></p><p><span class="math inline">\(A[k+2] \quad \quad S[k+2]-S[k]\)</span></p><p><span class="math inline">\(\cdots\)</span> <span class="math inline">\(\quad \quad \cdots\)</span></p><p><span class="math inline">\(A[n] \quad \quad \quad \quad S[n]-S[k]\)</span></p><p><span class="math inline">\(A[1] \quad \quad \quad S[1]+S[n]-S[k]\)</span></p><p><span class="math inline">\(\cdots\)</span> <span class="math inline">\(\quad \quad \cdots\)</span></p><p><span class="math inline">\(A[k] \quad \quad \quad S[k]+S[n]-S[k]\)</span></p><p><span class="math inline">\(\therefore ans = \sum abs(S[i]-S[k])\)</span>，要使<span class="math inline">\(ans\)</span>最小，即求到数轴上<span class="math inline">\(n\)</span>个点<span class="math inline">\(S_i\)</span>距离和的最小值</p><p>对于这道题行和列之间互不影响，相当于两次环形均分纸牌</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line">ll n, m, t;</span><br><span class="line">ll r[maxn], c[maxn];</span><br><span class="line">ll sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll avg, ll l, ll k[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; ++i) &#123;</span><br><span class="line">        sum[i] = sum[i<span class="number">-1</span>] + k[i] - avg;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test: &quot;</span> &lt;&lt; sum[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sum+<span class="number">1</span>, sum+<span class="number">1</span>+l);</span><br><span class="line">    ll mid = sum[l+<span class="number">1</span> &gt;&gt; <span class="number">1</span>], res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= l; ++i) &#123;</span><br><span class="line">        res += <span class="built_in">abs</span>(sum[i] - mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(r, <span class="number">0</span>, <span class="keyword">sizeof</span> r);</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> c);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        r[x]++, c[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">    ll r_avg = <span class="number">0</span>, c_avg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (t % n == <span class="number">0</span>) r_avg = t / n;</span><br><span class="line">    <span class="keyword">if</span> (t % m == <span class="number">0</span>) c_avg = t / m;</span><br><span class="line">    <span class="keyword">if</span> (r_avg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c_avg) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;both &quot;</span> &lt;&lt; solve(r_avg, n, r) + solve(c_avg, m, c);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;row &quot;</span> &lt;&lt; solve(r_avg, n, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c_avg &amp;&amp; !r_avg) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;column &quot;</span> &lt;&lt; solve(c_avg, m, c);</span><br><span class="line">    <span class="keyword">if</span> (!c_avg &amp;&amp; !r_avg) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图论基础(二)</title>
      <link href="2021/01/26/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80-%E4%BA%8C/"/>
      <url>2021/01/26/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="最短路">最短路：</h3><p><span class="math inline">\(Dijkstra\)</span>:</p><p><span class="math inline">\(POJ3635\)</span>：最短路上每个节点还要存当前油量，可以拆点。将第<span class="math inline">\(i\)</span>个点拆成<span class="math inline">\(p_i\)</span>个点，每个点有两个属性(编号，当前油量)。一共拆除<span class="math inline">\(1000\times100=1e5\)</span>个点，那么原问题就转化成了在一个<span class="math inline">\(G=(V,E)\, V=1e5,E=1e4\)</span>的无向图上的最短路。</p><ul><li><span class="math inline">\(if \,\,\, c+1 &lt;=C，(ver，c) \to (ver，c+1)\)</span> 如果油箱至少还能加一升油，我们可以更新加一升油的状态</li><li><span class="math inline">\(if \,\,\, c&gt;=cost，(ver，c) \to (new\_ver，c-cost)\)</span>如果可以从某条边走过去，更新到达下一个点的状态</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef pair&lt;int, int&gt; PII;</span></span><br><span class="line"><span class="comment">//typedef pair&lt;int, PII&gt; PIII;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ver</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d, u, c;    <span class="comment">//d当前总共消耗油费, u当前节点编号, c当前邮箱剩余容量</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Ver &amp;W)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> d &gt; W.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>, M = <span class="number">20005</span>, C = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, idx;</span><br><span class="line"><span class="keyword">int</span> p[N], h[N], e[M], ne[M], w[M];</span><br><span class="line"><span class="keyword">int</span> dist[N][C]; <span class="comment">//每个点最低油钱</span></span><br><span class="line"><span class="keyword">bool</span> vis[N][C];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = v;</span><br><span class="line">    w[idx] = d;</span><br><span class="line">    ne[idx] = h[u];</span><br><span class="line">    h[u] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;Ver&gt; heap;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(dist));   <span class="comment">//将所有点的油钱都初始化为正无穷</span></span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    heap.push(&#123;<span class="number">0</span>, st, <span class="number">0</span>&#125;);</span><br><span class="line">    dist[st][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (heap.size()) &#123;</span><br><span class="line">        Ver t = heap.top();</span><br><span class="line">        heap.pop();</span><br><span class="line">        <span class="keyword">if</span> (t.u == ed) <span class="keyword">return</span> t.d;</span><br><span class="line">        <span class="keyword">if</span> (vis[t.u][t.c])   <span class="keyword">continue</span>;</span><br><span class="line">        vis[t.u][t.c] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (t.c &lt; c) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[t.u][t.c + <span class="number">1</span>] &gt; t.d + p[t.u]) &#123; <span class="comment">// 如果这次加油后的油钱比原来的低</span></span><br><span class="line">                dist[t.u][t.c + <span class="number">1</span>] = t.d + p[t.u];</span><br><span class="line">                heap.push(&#123;dist[t.u][t.c + <span class="number">1</span>], t.u, t.c + <span class="number">1</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t.u]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (t.c &gt;= w[i]) &#123;  <span class="comment">//油量可以移动到下一个点</span></span><br><span class="line">                <span class="keyword">if</span> (dist[j][t.c-w[i]] &gt; t.d) &#123;  <span class="comment">// 如果这次到该点的油钱小于原来的</span></span><br><span class="line">                    dist[j][t.c-w[i]] = t.d;</span><br><span class="line">                    heap.push(&#123;t.d, j, t.c-w[i]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span>(h));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;d);</span><br><span class="line">        add(u, v, d);</span><br><span class="line">        add(v, u, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> query;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; query;</span><br><span class="line">    <span class="keyword">while</span> (query--) &#123;</span><br><span class="line">        <span class="keyword">int</span> c, s, e;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c &gt;&gt; s &gt;&gt; e;</span><br><span class="line">        <span class="keyword">int</span> t = dij(c, s, e);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">-1</span>)    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图论基础(一)</title>
      <link href="2021/01/20/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80-%E4%B8%80/"/>
      <url>2021/01/20/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="图的存储">图的存储</h3><p>邻接矩阵</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m[u][v] = value; <span class="comment">//节点u,v之间有一条边，权值为value</span></span><br></pre></td></tr></table></figure><p>链式前向星</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, w, pre;<span class="comment">//终点，边权，同起点的上一条边的位置</span></span><br><span class="line">&#125;edge[maxn];<span class="comment">//边集</span></span><br><span class="line"><span class="keyword">int</span> head[maxn];<span class="comment">//head[i],表示以i为起点的最后边在边集数组的位置</span></span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));<span class="comment">//-1表示该点无边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span><span class="comment">//插入第i条有向边，u起点，v终点，w边权</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[i].to = v;<span class="comment">//终点</span></span><br><span class="line">    edge[i].w = w;<span class="comment">//权值</span></span><br><span class="line">    edge[i].pre = head[u];<span class="comment">//以u为起点上一条边的位置，也就是与这个边起点相同的上一条边的位置</span></span><br><span class="line">    head[u] = i++;<span class="comment">//更新以u为起点上一条边的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意对于无向图，每次加边都需要双向加边</p><h3 id="图的搜索">图的搜索</h3><p><span class="math inline">\(BFS\)</span>：求图<span class="math inline">\(G=(V,E)\)</span>中顶点1到各顶点的最短路径</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将起点S放入队列Q</span><br><span class="line"><span class="keyword">while</span> (Q不为空) &#123;</span><br><span class="line">从Q中取出顶点u</span><br><span class="line">将与u相邻的未访问顶点v放入Q，d[v] = d[u]+<span class="number">1</span><span class="comment">//d[v]是顶点v到s的距离</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(POJ 2251\)</span>：三维<span class="math inline">\(BFS\)</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> l, r, c, ans;</span><br><span class="line"><span class="keyword">int</span> sx, sy, sz; <span class="comment">//记录起点与终点位置</span></span><br><span class="line"><span class="keyword">char</span> M[n][n][n];</span><br><span class="line"><span class="keyword">int</span> vis[n][n][n];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">6</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, z , step;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || z &lt; <span class="number">0</span> || x &gt;= r || y &gt;= c || z &gt;= l) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (M[z][x][y] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (vis[z][x][y])  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node now, next;</span><br><span class="line">    <span class="built_in">queue</span>&lt;Node&gt; q;</span><br><span class="line">    now.x = sx;</span><br><span class="line">    now.y = sy;</span><br><span class="line">    now.z = sz;</span><br><span class="line">    now.step = <span class="number">0</span>;</span><br><span class="line">    vis[sz][sx][sy] = <span class="number">1</span>;</span><br><span class="line">    q.push(now);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        now = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span> (M[now.z][now.x][now.y] == <span class="string">&#x27;E&#x27;</span>)  <span class="keyword">return</span> now.step;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">            next = now;</span><br><span class="line">            <span class="comment">//三维方向</span></span><br><span class="line">            next.x = now.x + dir[i][<span class="number">1</span>];</span><br><span class="line">            next.y = now.y + dir[i][<span class="number">2</span>];</span><br><span class="line">            next.z = now.z + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (check(next.x, next.y, next.z)) &#123;</span><br><span class="line">                <span class="comment">//cout &lt;&lt; &quot;test: &quot; &lt;&lt; next.z &lt;&lt; &quot; &quot; &lt;&lt; next.x &lt;&lt; &quot; &quot; &lt;&lt; next.y &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">                vis[next.z][next.x][next.y] = <span class="number">1</span>;   <span class="comment">//标记</span></span><br><span class="line">                next.step = now.step+<span class="number">1</span>;</span><br><span class="line">                q.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l, &amp;r, &amp;c) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">0</span> &amp;&amp; r == <span class="number">0</span> &amp;&amp; c == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; c; ++k) &#123;</span><br><span class="line">                    <span class="built_in">cin</span> &gt;&gt; M[i][j][k];</span><br><span class="line">                    <span class="keyword">if</span> (M[i][j][k] == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">                        sz = i;</span><br><span class="line">                        sx = j;</span><br><span class="line">                        sy = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = bfs();</span><br><span class="line">        <span class="keyword">if</span> (ans)    <span class="built_in">printf</span>(<span class="string">&quot;Escaped in %d minute(s).\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">else</span>  <span class="built_in">printf</span>(<span class="string">&quot;Trapped!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双向BFS</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">805</span>, M = <span class="number">805</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> g[N][N];</span><br><span class="line"><span class="keyword">int</span> vis[N][N];</span><br><span class="line">PII ghost[<span class="number">2</span>], boy, girl;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m || g[x][y] == <span class="string">&#x27;X&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(x - ghost[i].first) + <span class="built_in">abs</span>(y - ghost[i].second) &lt;= <span class="number">2</span>*step) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, step = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;M&#x27;</span>) boy = &#123;i, j&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;G&#x27;</span>) girl = &#123;i, j&#125;;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;Z&#x27;</span>) ghost[cnt++] = &#123;i, j&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;PII&gt; qb, qg;</span><br><span class="line">    qb.push(boy), qg.push(girl);</span><br><span class="line">    <span class="keyword">while</span>(qb.size() || qg.size()) &#123;</span><br><span class="line">        step++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, len = qb.size(); j &lt; len; ++j) &#123;</span><br><span class="line">                PII t = qb.front();</span><br><span class="line">                qb.pop();</span><br><span class="line">                <span class="keyword">int</span> x = t.first, y = t.second;</span><br><span class="line">                <span class="keyword">if</span> (!check(x, y, step)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> a = x+dx[k], b = y+dy[k];</span><br><span class="line">                    <span class="keyword">if</span> (check(a, b, step)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (vis[a][b] == <span class="number">2</span>)  <span class="keyword">return</span> step;</span><br><span class="line">                        <span class="keyword">if</span> (!vis[a][b]) &#123;</span><br><span class="line">                            vis[a][b] = <span class="number">1</span>;</span><br><span class="line">                            qb.push(&#123;a,b&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, len = qg.size(); j &lt; len; ++j) &#123;</span><br><span class="line">                PII t = qg.front();</span><br><span class="line">                qg.pop();</span><br><span class="line">                <span class="keyword">int</span> x = t.first, y = t.second;</span><br><span class="line">                <span class="keyword">if</span> (!check(x, y, step)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> a = x+dx[k], b = y+dy[k];</span><br><span class="line">                    <span class="keyword">if</span> (check(a, b, step)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (vis[a][b] == <span class="number">1</span>)  <span class="keyword">return</span> step;</span><br><span class="line">                        <span class="keyword">if</span> (!vis[a][b]) &#123;</span><br><span class="line">                            vis[a][b] = <span class="number">2</span>;</span><br><span class="line">                            qg.push(&#123;a,b&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; bfs() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(DFS\)</span>：遍历图时跳过已标记的点，保证每个点仅访问一次。一般用递归或站来写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以链式前向星为例</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  vis[u] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[e[i].t]) &#123;</span><br><span class="line">      dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="math inline">\(HOJ 2181\)</span>: 直接深搜，注意记录路径，字典序用<span class="math inline">\(vector\)</span>的排序完成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[n], pre[n];</span><br><span class="line"><span class="keyword">int</span> st, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; M[n];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == st) <span class="keyword">return</span>;</span><br><span class="line">    print(pre[u]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; u ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == st &amp;&amp; sum == <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d:  %d&quot;</span>, ++k, st);</span><br><span class="line">        print(pre[u]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d\n&quot;</span>, st);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = M[u][i];</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            vis[v] = <span class="number">1</span>;</span><br><span class="line">            pre[v] = u; <span class="comment">//u是v之前的节点</span></span><br><span class="line">            dfs(v, sum+<span class="number">1</span>);</span><br><span class="line">            vis[v] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) M[i].clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        M[i].push_back(a);</span><br><span class="line">        M[i].push_back(b);</span><br><span class="line">        M[i].push_back(c);</span><br><span class="line">        sort(M[i].begin(), M[i].end());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;st &amp;&amp; st) &#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">        dfs(st, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse下Tomcat配置详解</title>
      <link href="2021/01/10/Eclipse%E4%B8%8BTomcat%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>2021/01/10/Eclipse%E4%B8%8BTomcat%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="eclipse下tomcat配置">Eclipse下Tomcat配置</h4><h5 id="版本选择">1. 版本选择</h5><p>本人使用了tomcat 7,8,9 和 JDK 8u231,11,13分别配置，最后tomcat8和JDK 8u231成功。 ##### 2.Tomcat配置 最基本的系统环境变量配置详见Tomcat自带的帮助文档。 先参考这篇<a href="https://blog.csdn.net/kugumao0620/article/details/79517588">tomcat设置系统服务</a> 有的电脑启动tomcat服务会出现指定代码错误等，但是不影响正常使用。 如果tomcat启动窗口出现乱码，参考<a href="https://jingyan.baidu.com/article/c910274b39fbdc8d371d2d23.html">tomcat窗口乱码解决</a> 如果原先安装了tomcat9，删除之后，系统里的tomcat9服务仍在，此时再安装tomcat8，会发生冲突，这时有两种选择： 1.<a href="https://blog.csdn.net/l358366885/article/details/80687836">删除服务列表服务</a> 2.修改注册表： win+r后输入regedit，找到如下路径 _LOCAL_MACHINE 找到其中的tomcat9和tomcatserver修改里面的ImagePath即可</p><h5 id="eclipse下配置tomcat">3. eclipse下配置tomcat</h5><p>建议使用这两篇 <a href="https://www.cnblogs.com/greatfish/p/5866950.html">修改servers下tomcat配置</a> <a href="https://blog.csdn.net/zytbft/article/details/86523723">eclipse配置tomcat</a> 如果遇到的是8080端口占用问题，参考这篇<a href="https://blog.csdn.net/weixin_45342025/article/details/94393288">8080端口被占用处理</a> 如果出现java错误：The superclass &quot;javax.servlet.http.HttpServlet&quot; 参考<a href="https://www.cnblogs.com/achengmu/p/8082457.html">Java build path</a> 如果出现误删Server后Tomcat服务器报错：The Tomcat server configuration，可参考<a href="https://blog.csdn.net/u014800380/article/details/53068761">误删Servers解决</a> 关于404问题，参考这篇<a href="https://blog.csdn.net/qq_40164190/article/details/84571602">Tomcat访问文件404解决</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简单博弈论</title>
      <link href="2021/01/10/my-first-blog/"/>
      <url>2021/01/10/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="博弈论">博弈论</h2><h3 id="一.-抽象表示">一. 抽象表示</h3><p>将组合游戏中的每一个状态抽象成图中的一个点，将每一步决策抽象为图中的一条边。这样，对于组合游戏的每一次博弈，我们都可以将其抽象成游戏图中的一条从某一顶点到出度为0的路径</p><h3 id="二.-p-n状态">二. P, N状态</h3><p>一个先手胜状态被认为是一个N-状态（因为下一个玩家即将获胜），一个后手胜状态被认为是一个P-状态（因为前一个玩家即将获胜）。 P-和N-状态归纳性地描述如下:</p><blockquote><p>一个点v是P状态当且仅当它的所有后继为N状态 一个点v是N状态当且仅当它的一些后继为P状态</p></blockquote><h3 id="三.-sg函数">三. SG函数</h3><p>给定一个有限子集S<span class="math inline">\(\subset\)</span>N，令mexS(最小排斥值)为没有出现在S中的最小自然数 现在给定一个游戏图G = (V, E)，则有 <span class="math inline">\(g(v) = mex\lbrace{g(w) | (v, w) {\in} E}\rbrace\)</span> 性质：</p><blockquote><p>对于任意的局面，若它的SG值为0，则它任何一个后继局面的SG值不为0 对于任意的局面，若它的SG值不为0，那么它一定有一个后继局面的SG值为0</p></blockquote><p>在我们每次只能进行一步操作的情况下，对于任何的游戏的和，我们若将其中的任一单一 SG-组合游戏换成数目为它的SG 值的一堆石子，该单一 SG-组合游戏的规则变成取石子游戏的规则（可以任意取，甚至取完），则游戏的和的胜负情况不变。</p><h3 id="四.-anti-sg游戏">四. Anti-SG游戏</h3><p>定义：决策集合为空的游戏者赢，即取走最后一个石子的人败 SJ定理：对于任意一个 Anti-SG 游戏，如果我们规定当局面中所有的单一游戏的 SG 值为 0 时，游戏结束，则先手必胜当且仅当：</p><ul><li>游戏的 SG 函数不为 0 且游戏中某个单一游戏的 SG 函数大于 1</li><li>游戏的 SG 函数为 0 且游戏中没有单一游戏的 SG 函数大于 1。</li></ul><h3 id="五.-multi-sg游戏">五. Multi-SG游戏</h3><p>定义：在符合拓扑原则的前提下，一个单一游戏的后继可以为多个单一游戏，即可以将一堆石子分为多堆石子 先从Multi-Nim开始：有n堆石子，两个人可以从任意一堆石子中拿任意多个石子(不能不拿)或把一堆数量不少于2石子分为两堆不为空的石子，没法拿的人失败。问谁会胜利。这有一神奇定义：</p><p><span class="math display">\[SG(x) = \begin{cases} x-1, &amp; \text{$x\;mod\;4 = 0$} \\ x, &amp; \text{$x\;mod\;4 = 1\,or\,2$} \\ x + 1, &amp; \text{$x\;mod\;4 = 3$} \end{cases}\]</span></p><h3 id="六.-every-sg游戏">六. Every-SG游戏</h3><p>定义：对于还没有结束的单一游戏，游戏者必须对该游戏进行一步决策，即每一个可以移动的棋子都要移动 有如下解法：在通过拓扑关系计算某一个状态点的 SG 函数时（事实上，我们只需要计算该状态点的 SG 值是否为 0）对于 SG 值为 0 的点，我们需要知道最快几步能将游戏带入终止状态，对于 SG 值不为 0 的点，我们需要知道最慢几步游戏会被带入终止状态，我们用step函数来表示这个值。</p><p><span class="math display">\[step(v) = \begin{cases} 0, &amp; \text{$v为终止状态$} \\ max(step(u))+1, &amp; \text{$SG(v) &gt; 0 \bigcap u为v的后继状态 \bigcap SG(u) = 0$} \\ min(step(u))+1, &amp; \text{$SG(v) = 0 \bigcap  u为v的后继状态$} \end{cases}\]</span></p><p>定理：对于Every-SG游戏先手必胜当且仅当单一游戏中最大的step为奇数</p><h3 id="七.-翻硬币游戏">七. 翻硬币游戏</h3><p>一般规则如下：</p><ul><li>N 枚硬币排成一排，有的正面朝上，有的反面朝上。我们从左开始对硬币按 1 到 N 编号。</li><li>游戏者根据某些约束翻硬币（如：每次只能翻一或两枚，或者每次只能翻连续的几枚），但他所翻动的硬币中，最右边的必须是从正面翻到反面。</li><li>谁不能翻谁输。</li></ul><p>结论：局面的SG值为局面中每个正面朝上的棋子单一存在时的SG值的异或和</p><h3 id="八.-树的删边游戏">八. 树的删边游戏</h3><p>规则如下：</p><ul><li>给出一个有 N 个点的树，有一个点作为树的根节点。</li><li>游戏者轮流从树中删去边，删去一条边后，不与根节点相连的部分将被移走。</li><li>谁无路可走谁输。</li></ul><p>定理：叶子节点的SG值为0；中间节点的SG值为它的所有子节点的SG值加1后的异或和</p><h3 id="九.-无向图删边游戏">九. 无向图删边游戏</h3><h4 id="christmas-game">1. Christmas Game</h4><p>题目大意：</p><ul><li>有 N 个局部联通的图。</li><li>Harry 和 Sally 轮流从图中删边，删去一条边后，不与根节点相连的部分将被移走。Sally 为先手。</li><li>图是通过从基础树中加一些边得到的。</li><li>所有形成的环保证不共用边，且只与基础树有一个公共点。</li><li>谁无路可走谁输</li></ul><p>有如下性质：</p><ul><li>对于长度为奇数的环，去掉其中任意一个边之后，剩下的两个链长度同奇偶，异或之后的 SG 值不可能为奇数，所以它的 SG 值为 1；</li><li>对于长度为偶数的环，去掉其中任意一个边之后，剩下的两个链长度异奇偶，异或之后的 SG 值不可能为 0，所以它的 SG 值为 0；</li></ul><p>所以我们可以去掉所有的偶环，将所有的奇环变为长短为1的链，这样就改造成了上一节的模型，算出每一棵树的SG值之后，再按Nim游戏异或即可</p><h4 id="无向图删边游戏">2. 无向图删边游戏</h4><p>对Christmas Game进行一步拓展——去掉对环的限制，规则如下：</p><ul><li>一个无相联通图，有一个点作为图的根。</li><li>游戏者轮流从图中删去边，删去一条边后，不与根节点相连的部分将被移走。</li><li>谁无路可走谁输。</li></ul><p>对于这一模型，有一著名定理Fusion Principle ：</p><blockquote><p>我们可以对无向图做如下改动：将图中的任意一个偶环缩成一个新点，任意一个奇环缩成一个新点加一个新 边；所有连到原先环上的边全部改为与新点相连。这样的改动不会影响图的 SG 值。</p></blockquote><p>这样，我们可以将任意一个无向图改成树结构，“无向图删边游戏” 就变成了 “树的删边游戏”</p><h3 id="十.简单博弈">十.简单博弈</h3><h4 id="斐波那契博弈">1.斐波那契博弈</h4><p>1堆石子有n个,两人轮流取.先取者第1次可以取任意多个，但不能全部取完.以后每次取的石子数不能超过上次取子数的2倍。取完者胜.先取者负输出&quot;Second win&quot;.先取者胜输出&quot;First win&quot;.</p><p>Zeckendorf定理（齐肯多夫定理）：任何正整数可以表示为若干个不连续的Fibonacci数之和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, fib[<span class="number">50</span>];</span><br><span class="line">    fib[<span class="number">0</span>] = <span class="number">2</span>; fib[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">        fib[i] = fib[i<span class="number">-1</span>] + fib[i<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fib[i] == n)&#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Second win&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fib[i] &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;First win&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="威佐夫博弈">2.威佐夫博弈</h4><p>有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b))&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b)</span><br><span class="line">swap(a, b);</span><br><span class="line">c = <span class="built_in">floor</span>(b-a) *((<span class="built_in">sqrt</span>(<span class="number">5.0</span>)+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(a == c)<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;0&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="nimk博弈">3.Nimk博弈</h4><p>有n堆各若干个物品，两个人轮流从K堆取任意多的物品，规定每次至少取一个，多者不限，最后取光者得胜</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> SG[MAXN];<span class="comment">//需要处理的SG值数组</span></span><br><span class="line"><span class="keyword">int</span> XOR[MAXN];<span class="comment">//储存每一个二进制位上的和</span></span><br><span class="line"><span class="keyword">int</span> xxx;<span class="comment">//储存每一个SG值的临时变量</span></span><br><span class="line"><span class="keyword">int</span> num;<span class="comment">//储存当前SG值有多少位的临时变量</span></span><br><span class="line"><span class="keyword">int</span> maxn;<span class="comment">//储存最大的SG值位数</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> N,<span class="keyword">int</span> M)</span><span class="comment">//N表示SG数组的大小,从1到N,M表示每次可以取1到M堆</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(XOR, <span class="number">0</span>, <span class="keyword">sizeof</span> XOR);</span><br><span class="line">maxn = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">&#123;</span><br><span class="line">    xxx = SG[i];</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (xxx) &#123;</span><br><span class="line">XOR[num] += xxx&amp;<span class="number">1</span>;</span><br><span class="line">num++;</span><br><span class="line">xxx &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">maxn = max(maxn, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line"><span class="keyword">if</span> (XOR[i] % (M + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//返回true表示先手必胜</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//返回false表示先手必败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一.例题">十一.例题</h3><h4 id="hdu--1536">1.HDU--1536</h4><p>在最简单的取石子情况中，有如下规律： <span class="math display">\[\begin{cases}        sg(x) = x &amp; \text{$可以取任意个石子$} \\        sg(x) = x\;mod\;(1+m) &amp; \text{可以取1~m个石子}\\        sg打表 &amp; \text{$可以取石子个数为不连续整数$}         \end{cases}\]</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10008</span>;<span class="comment">//N为所有堆最多石子的数量</span></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">108</span>],sg[N];<span class="comment">//f[]用来保存只能拿多少个，sg[]来保存SG值</span></span><br><span class="line"><span class="keyword">bool</span> hash[N];<span class="comment">//mex&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sg_solve</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">memset</span>(sg,<span class="number">0</span>,<span class="keyword">sizeof</span>(sg));</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(hash,<span class="number">0</span>,<span class="keyword">sizeof</span>(hash));</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=t;j++)</span><br><span class="line">            <span class="keyword">if</span>(i - f[j] &gt;= <span class="number">0</span>)</span><br><span class="line">               hash[sg[i-f[j]]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=N;j++)</span><br><span class="line">            <span class="keyword">if</span>(!hash[j])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        sg[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, m, l, num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k), k) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i= <span class="number">1</span>;i &lt;= k;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;f[i]);</span><br><span class="line">        sg_solve(k, N);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        <span class="built_in">string</span> ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;l);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= l; j++) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">                sum ^= sg[num];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">0</span>) ans+=<span class="string">&quot;L&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span>    ans+=<span class="string">&quot;W&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="hdu--1524">2.HDU--1524</h4><p>博弈的抽象表示，帮助理解SG</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> sg[maxn], pat[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSG</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sg[u] != <span class="number">-1</span>)    <span class="keyword">return</span> sg[u];</span><br><span class="line">    <span class="keyword">bool</span> mex[<span class="number">10</span>*maxn];</span><br><span class="line">    <span class="built_in">memset</span>(mex, <span class="literal">false</span>, <span class="keyword">sizeof</span>(mex));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">        getSG(v);</span><br><span class="line">        mex[sg[v]] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mex[i]) &#123;</span><br><span class="line">            sg[u] = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sg[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, m, p, x;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            G[i].clear();</span><br><span class="line">            pat[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p);</span><br><span class="line">            <span class="keyword">while</span> (p--) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">                G[i].push_back(x);</span><br><span class="line">                pat[x]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(sg, <span class="number">-1</span>, <span class="keyword">sizeof</span>(sg));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pat[i] == <span class="number">0</span>)    getSG(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m), m) &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">                getSG(x);</span><br><span class="line">                ans ^= sg[x];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ans != <span class="number">0</span>)   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;WIN&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;LOSE&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bzoj--1299">3.BZOJ--1299</h4><p>对于一个博弈游戏而言，重要的是通过操作留给对面一个<span class="math inline">\(sg=0\)</span>的局面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,sg[<span class="number">2001</span>],a[<span class="number">2001</span>];</span><br><span class="line"><span class="keyword">bool</span> found;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> used,<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(x==n+<span class="number">1</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span>(!now&amp;&amp;used&gt;<span class="number">0</span>)found=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     dfs(x+<span class="number">1</span>,used,now);</span><br><span class="line">     dfs(x+<span class="number">1</span>,used+<span class="number">1</span>,now^a[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=<span class="number">10</span>;t++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">memset</span>(sg,<span class="number">-1</span>,<span class="keyword">sizeof</span>(sg));</span><br><span class="line">found=<span class="number">0</span>;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">       dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">       <span class="keyword">if</span>(found)<span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">       <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类green博弈">类Green博弈</h3><p>现有一棵树，树的每条边都有长度，A和B轮流染色，每次可选择一条边进行染色，染色长度<span class="math inline">\(\leq\)</span>边长，已染色的边不能再染色，同时将子节点删除。</p><blockquote><p>green博弈变形，对于都是1的就是green博弈<span class="math inline">\(SG[u]\)</span> ^<span class="math inline">\(=SG[v]+1\)</span></p><p>对于大于1的边，偶数对其没有贡献，奇数有贡献，<span class="math inline">\(SG[u]\)</span> ^$= SG[v] <span class="math inline">\(^\)</span>(val[v] % 2)$</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, val, next;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sg[maxn], head[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].val = w;</span><br><span class="line">    edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sg[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        <span class="keyword">if</span> (edge[i].val == <span class="number">1</span>) sg[u] ^= (sg[v]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span>    sg[u] ^= (sg[v] ^ (edge[i].val % <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= T; ++j) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n, u, v, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            add(u, v, w);</span><br><span class="line">            add(v, u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: &quot;</span>, j);</span><br><span class="line">        <span class="keyword">if</span> (sg[<span class="number">0</span>])  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Emily&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Jolly&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阶梯博弈">阶梯博弈</h3><p>n个人随机的站在若干级台阶上，最高一级台阶必须站人，A和B分别移动某个人向上走任意走多级台阶，不能越过更高级台阶上的人，且同一台阶上只能站一人，无法继续移动者输。给出n个人位置，计算先手必胜策略。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>,i,j,k,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[n])!=EOF)</span><br><span class="line">        n++;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; ++i)</span><br><span class="line">        b[i<span class="number">-1</span>] = a[i] - a[i<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i+=<span class="number">2</span>)</span><br><span class="line">        sum ^= b[i];</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//枚举第i个人移动j步，使得剩下的局面异或等于0，</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; ++i)</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>; a[i]+j&lt;a[i+<span class="number">1</span>]; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                b[i] -= j;</span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">                    b[i<span class="number">-1</span>] += j;</span><br><span class="line">                </span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;n<span class="number">-1</span>; k+=<span class="number">2</span>)</span><br><span class="line">                    sum ^= b[k];</span><br><span class="line">                <span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,a[i],a[i]+j);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                b[i] += j;</span><br><span class="line">                <span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">                    b[i<span class="number">-1</span>] -= j;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/08/hello-world/"/>
      <url>2021/01/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
